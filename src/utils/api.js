// Supabase Integration for Mevzuat
import { supabase } from './supabase'

class MevzuatAPI {
  async searchMevzuat(query, types = ['KANUN']) {
    try {
      console.log(`üîç Supabase'de arama yapƒ±lƒ±yor: "${query}", types: ${types}`)
      
      // Supabase'deki search_mevzuat fonksiyonunu √ßaƒüƒ±r
      const { data, error } = await supabase
        .rpc('search_mevzuat', {
          search_query: query,
          mevzuat_types: types,
          limit_count: 20
        })

      if (error) {
        console.error('Supabase search error:', error)
        throw new Error(error.message)
      }

      console.log(`‚úÖ ${data?.length || 0} sonu√ß bulundu`)
      
      // Veriyi frontend formatƒ±na √ßevir
      const formattedData = data.map(item => ({
        id: item.mevzuat_id,
        adi: item.title,
        sayi: item.mevzuat_no,
        tarih: item.publication_date,
        tip: item.type,
        ozet: item.summary,
        madde_sayisi: item.article_count,
        kategori: item.category_title,
        rank: item.rank
      }))

      return { success: true, data: formattedData }
    } catch (error) {
      console.error('Search API error:', error)
      return { success: false, error: error.message }
    }
  }

  async getMevzuatArticleTree(mevzuatId) {
    try {
      console.log(`üìä Mevzuat maddeleri alƒ±nƒ±yor: ${mevzuatId}`)
      
      const { data, error } = await supabase
        .from('mevzuat_articles')
        .select('*')
        .eq('mevzuat_id', mevzuatId)
        .order('article_order', { ascending: true })

      if (error) {
        console.error('Supabase articles error:', error)
        throw new Error(error.message)
      }

      console.log(`‚úÖ ${data?.length || 0} madde bulundu`)
      return { success: true, data }
    } catch (error) {
      console.error('Article tree API error:', error)
      return { success: false, error: error.message }
    }
  }

  async getMevzuatArticleContent(mevzuatId, articleNumber) {
    try {
      console.log(`üìÑ Madde i√ßeriƒüi alƒ±nƒ±yor: ${mevzuatId}, madde: ${articleNumber}`)
      
      const { data, error } = await supabase
        .from('mevzuat_articles')
        .select('*')
        .eq('mevzuat_id', mevzuatId)
        .eq('article_no', articleNumber)
        .single()

      if (error) {
        console.error('Supabase article content error:', error)
        throw new Error(error.message)
      }

      console.log(`‚úÖ Madde i√ßeriƒüi alƒ±ndƒ±`)
      return { success: true, data }
    } catch (error) {
      console.error('Article content API error:', error)
      return { success: false, error: error.message }
    }
  }

  async getMevzuatCategories() {
    try {
      console.log(`üìÇ Kategoriler alƒ±nƒ±yor`)
      
      const { data, error } = await supabase
        .from('mevzuat_categories')
        .select('*')
        .order('title', { ascending: true })

      if (error) {
        console.error('Supabase categories error:', error)
        throw new Error(error.message)
      }

      console.log(`‚úÖ ${data?.length || 0} kategori alƒ±ndƒ±`)
      return { success: true, data }
    } catch (error) {
      console.error('Categories API error:', error)
      return { success: false, error: error.message }
    }
  }

  // MCP Server entegrasyonu - GER√áEK VERƒ∞LER
  async searchWithMCP(query, types = ['KANUN'], pageNumber = 1) {
    try {
      console.log(`üîç MCP Server ile ger√ßek arama: "${query}" (Sayfa: ${pageNumber})`)
      
      // Production: Render URL, Development: localhost
      const mcpServerUrl = process.env.NODE_ENV === 'production' 
        ? 'https://mevzuat-ai-saas.onrender.com' 
        : 'http://localhost:8080'
      
      const response = await fetch(`${mcpServerUrl}/search`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phrase: query,
          mevzuat_turleri: types,
          page_size: 20,
          page_number: pageNumber,
          sort_field: 'RESMI_GAZETE_TARIHI',
          sort_direction: 'desc'
        })
      })

      if (!response.ok) {
        throw new Error(`MCP Server error: ${response.status}`)
      }

      const result = await response.json()
      
      if (!result.success) {
        throw new Error(result.error || 'MCP Server error')
      }

      console.log(`‚úÖ MCP'den ${result.data?.documents?.length || 0} ger√ßek sonu√ß bulundu`)
      console.log('ƒ∞lk ogenin fieldlari:', result.data?.documents?.[0])
      
      // Veriyi frontend formatƒ±na √ßevir
      const formattedData = result.data?.documents?.map(item => ({
        id: item.mevzuat_id || item.id,
        adi: item.mevzuat_adi || item.title,
        sayi: item.mevzuat_no || item.number,
        tarih: item.resmi_gazete_tarihi || item.yayim_tarihi || item.publish_date || item.created_at,
        tip: item.mevzuat_turu || item.type,
        ozet: item.ozet || item.summary || 'Ger√ßek mevzuat.gov.tr verisi',
        madde_sayisi: item.madde_sayisi || item.article_count || 0,
        kategori: this.categorizeMevzuat(item.mevzuat_adi || item.title, item.mevzuat_turu || item.type),
        url: item.url,
        rank: this.calculateRelevanceScore(item.mevzuat_adi || item.title, query),
        // T√ºm tarih alanlarƒ±nƒ± koruyalƒ±m
        resmi_gazete_tarihi: item.resmi_gazete_tarihi,
        yayim_tarihi: item.yayim_tarihi,
        mevzuat_tur: item.mevzuat_tur,
        mevzuat_adi: item.mevzuat_adi,
        mevzuat_no: item.mevzuat_no
      })) || []

      // 1. √ñnce tarihe g√∂re sƒ±rala (en yeni √∂nce)
      formattedData.sort((a, b) => {
        const dateA = new Date(a.tarih || a.resmi_gazete_tarihi || '1900-01-01')
        const dateB = new Date(b.tarih || b.resmi_gazete_tarihi || '1900-01-01')
        return dateB.getTime() - dateA.getTime() // En yeni tarih √∂nce
      })
      
      // 2. Sonra relevance skoruna g√∂re grup i√ßinde sƒ±rala
      const now = new Date()
      formattedData.forEach(item => {
        const itemDate = new Date(item.tarih || item.resmi_gazete_tarihi || '1900-01-01')
        const daysDiff = Math.abs((now.getTime() - itemDate.getTime()) / (1000 * 3600 * 24))
        
        // Yeni tarihlere bonus puan ver
        const recencyBonus = daysDiff < 365 ? (365 - daysDiff) / 10 : 0
        item.finalScore = item.rank + recencyBonus
      })
      
      // Final skorlarƒ±na g√∂re tekrar sƒ±rala
      formattedData.sort((a, b) => b.finalScore - a.finalScore)
      
      // Debug: ƒ∞lk 5 sonucun skorlarƒ±nƒ± console'a yazdƒ±r
      console.log('üéØ Relevance Skorlarƒ± (ƒ∞lk 5):')
      formattedData.slice(0, 5).forEach((item, index) => {
        console.log(`${index + 1}. ${item.adi} ‚Üí Skor: ${item.rank}`)
      })

      return { success: true, data: formattedData }
      
    } catch (error) {
      console.error('MCP Search error:', error)
      return { success: false, error: error.message }
    }
  }

  // Mevzuat detayƒ±nƒ± getir
  async getDocumentContent(mevzuatId) {
    try {
      console.log('MCP document content request for ID:', mevzuatId)
      
      const response = await fetch(`${this.MCP_BASE_URL}/get_article_tree`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          mevzuat_id: mevzuatId
        })
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()
      console.log('MCP document tree response:', data)

      if (data.success) {
        return { success: true, data: data.data }
      } else {
        throw new Error(data.error || 'MCP server error')
      }
    } catch (error) {
      console.error('MCP Document API error:', error)
      return { success: false, error: error.message }
    }
  }

  // Relevance skoru hesapla (ana kanunlar ve birle≈üik kelimeler √∂ncelikli)
  calculateRelevanceScore(title, query) {
    if (!title || !query) return 1.0
    
    const titleLower = title.toLowerCase()
    const queryLower = query.toLowerCase()
    const queryWords = queryLower.split(/\s+/).filter(word => word.length > 2)
    
    let score = 1.0
    
    // Birle≈üik kelime analizi
    const matchedWords = queryWords.filter(word => titleLower.includes(word))
    const matchRatio = matchedWords.length / queryWords.length
    
    // Birle≈üik kelime bonusu (ne kadar √ßok kelime e≈üle≈üirse o kadar y√ºksek skor)
    if (matchRatio >= 0.8) {  // %80+ e≈üle≈üme
      score += 15.0
    } else if (matchRatio >= 0.6) {  // %60+ e≈üle≈üme
      score += 10.0
    } else if (matchRatio >= 0.4) {  // %40+ e≈üle≈üme
      score += 5.0
    }
    
    // KDV ve iade √∂zel kombinasyonlarƒ±
    if (queryLower.includes('kdv') && queryLower.includes('iade')) {
      // Ana KDV Kanunu en √∂nce gelmeli
      if ((titleLower.includes('katma deƒüer vergisi kanunu') || titleLower.includes('kdv kanunu')) && 
          !titleLower.includes('y√∂netmelik') && !titleLower.includes('tebliƒü')) {
        score += 30.0 // Ana KDV Kanunu en y√ºksek √∂ncelik
      }
      // KDV + iade birlikte ge√ßen mevzuat
      else if (titleLower.includes('kdv') && titleLower.includes('iade')) {
        score += 25.0 // Tam e≈üle≈üme i√ßin √ßok y√ºksek skor
      } 
      // Katma deƒüer vergisi + iade birlikte
      else if (titleLower.includes('katma deƒüer vergisi') && titleLower.includes('iade')) {
        score += 22.0
      }
      // Sadece KDV ge√ßen mevzuat (iade yoksa daha d√º≈ü√ºk)
      else if (titleLower.includes('kdv') || titleLower.includes('katma deƒüer vergisi')) {
        score += 15.0
      } 
      // Sadece iade ge√ßen mevzuat (KDV yoksa daha d√º≈ü√ºk)
      else if (titleLower.includes('iade')) {
        score += 8.0
      }
    }
    
    // Tek ba≈üƒ±na KDV aramasƒ± (iade olmadan)
    else if (queryLower.includes('kdv') && !queryLower.includes('iade')) {
      if (titleLower.includes('katma deƒüer vergisi kanunu') || titleLower.includes('kdv kanunu')) {
        score += 25.0 // Ana KDV Kanunu
      } else if (titleLower.includes('kdv') || titleLower.includes('katma deƒüer vergisi')) {
        score += 12.0
      }
    }
    
    // Ana vergi kanunlarƒ± i√ßin y√ºksek skor (Kanun t√ºr√º varsa ekstra bonus)
    if (queryLower.includes('vergi')) {
      // Ana Vergi Kanunlarƒ± (en y√ºksek √∂ncelik)
      if (titleLower.includes('gelir vergisi kanunu') && !titleLower.includes('y√∂netmelik')) {
        score += 25.0 // Gelir Vergisi Kanunu
      } else if (titleLower.includes('vergi usul kanunu') && !titleLower.includes('y√∂netmelik')) {
        score += 25.0 // Vergi Usul Kanunu
      } else if (titleLower.includes('kurumlar vergisi kanunu') && !titleLower.includes('y√∂netmelik')) {
        score += 24.0 // Kurumlar Vergisi Kanunu
      } else if ((titleLower.includes('katma deƒüer vergisi kanunu') || titleLower.includes('kdv kanunu')) && !titleLower.includes('y√∂netmelik')) {
        score += 23.0 // KDV Kanunu
      } else if (titleLower.includes('har√ßlar kanunu') && !titleLower.includes('y√∂netmelik')) {
        score += 20.0 // Har√ßlar Kanunu
      } else if (titleLower.includes('damga vergisi kanunu') && !titleLower.includes('y√∂netmelik')) {
        score += 18.0 // Damga Vergisi Kanunu
      }
      // Diƒüer vergi kanunlarƒ± (genel)
      else if (titleLower.includes('vergi') && titleLower.includes('kanun') && !titleLower.includes('y√∂netmelik')) {
        score += 15.0 // Diƒüer vergi kanunlarƒ±
      }
      // Vergi y√∂netmelikleri (orta √∂ncelik)
      else if (titleLower.includes('vergi') && titleLower.includes('y√∂netmelik')) {
        score += 8.0 // Vergi y√∂netmelikleri
      }
      // Vergi tebliƒüleri (d√º≈ü√ºk √∂ncelik)
      else if (titleLower.includes('vergi') && titleLower.includes('tebliƒü')) {
        score += 6.0 // Vergi tebliƒüleri
      }
      // Genel vergi mevzuatƒ±
      else if (titleLower.includes('vergi')) {
        score += 4.0 // Vergi i√ßeren diƒüer mevzuat
      }
    }
    
    // Tam kelime e≈üle≈ümesi bonusu
    queryWords.forEach(word => {
      if (titleLower.includes(word)) {
        score += 2.0
      }
    })
    
    // Title'da query tam e≈üle≈ümesi varsa ekstra bonus
    if (titleLower.includes(queryLower)) {
      score += 5.0
    }
    
    // Mevzuat t√ºr√º hiyerar≈üi bonusu (√∂nemlilik sƒ±rasƒ±na g√∂re)
    score += this.getMevzuatTypeScore(title, titleLower)
    
    return score
  }

  // Mevzuat t√ºr√º √∂ncelik skorlarƒ±
  getMevzuatTypeScore(title, titleLower) {
    // Ana Kanunlar (en y√ºksek √∂ncelik)
    if (titleLower.includes('kanun') && !titleLower.includes('h√ºkm√ºnde')) {
      return 10.0
    }
    
    // Kanun H√ºkm√ºnde Kararnameler
    if (titleLower.includes('kanun h√ºkm√ºnde') || titleLower.includes('khk')) {
      return 8.0
    }
    
    // T√ºz√ºkler
    if (titleLower.includes('t√ºz√ºk') || titleLower.includes('tuzuk')) {
      return 7.0
    }
    
    // Y√∂netmelikler (Cumhurba≈ükanlƒ±ƒüƒ± ve normal)
    if (titleLower.includes('y√∂netmelik')) {
      if (titleLower.includes('cumhurba≈ükanlƒ±ƒüƒ±')) {
        return 6.0  // CB Y√∂netmeliƒüi
      }
      return 5.5  // Normal Y√∂netmelik
    }
    
    // Tebliƒüler
    if (titleLower.includes('tebliƒü')) {
      return 4.0
    }
    
    // Cumhurba≈ükanlƒ±ƒüƒ± Kararlarƒ±
    if (titleLower.includes('cumhurba≈ükanlƒ±ƒüƒ±') && titleLower.includes('karar')) {
      return 3.5
    }
    
    // Cumhurba≈ükanlƒ±ƒüƒ± Kararnameleri
    if (titleLower.includes('cumhurba≈ükanlƒ±ƒüƒ±') && titleLower.includes('kararname')) {
      return 3.0
    }
    
    // Cumhurba≈ükanlƒ±ƒüƒ± Genelgeleri
    if (titleLower.includes('cumhurba≈ükanlƒ±ƒüƒ±') && titleLower.includes('genelge')) {
      return 2.5
    }
    
    // Diƒüer kararlar
    if (titleLower.includes('karar')) {
      return 2.0
    }
    
    // Genelgeler
    if (titleLower.includes('genelge')) {
      return 1.5
    }
    
    // M√ºlga mevzuat (en d√º≈ü√ºk)
    if (titleLower.includes('m√ºlga') || titleLower.includes('mulga')) {
      return 0.5
    }
    
    // Varsayƒ±lan
    return 1.0
  }

  // Kategori belirleme
  categorizeMevzuat(title, type) {
    const titleLower = title.toLowerCase()
    if (titleLower.includes('i≈ü') || titleLower.includes('√ßalƒ±≈üma')) return 'ƒ∞≈ü Hukuku'
    if (titleLower.includes('anayasa')) return 'Anayasa Hukuku'
    if (titleLower.includes('ceza')) return 'Ceza Hukuku'
    if (titleLower.includes('medeni')) return 'Medeni Hukuk'
    if (titleLower.includes('vergi')) return 'Vergi Hukuku'
    if (titleLower.includes('ticaret')) return 'Ticaret Hukuku'
    if (titleLower.includes('saƒülƒ±k')) return 'Saƒülƒ±k Hukuku'
    if (titleLower.includes('eƒüitim')) return 'Eƒüitim Hukuku'
    return 'ƒ∞dare Hukuku'
  }
}

export default new MevzuatAPI()